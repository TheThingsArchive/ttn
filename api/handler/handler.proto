// Copyright Â© 2016 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "github.com/TheThingsNetwork/ttn/api/broker/broker.proto";
import "github.com/TheThingsNetwork/ttn/api/protocol/protocol.proto";
import "github.com/TheThingsNetwork/ttn/api/protocol/lorawan/device.proto";

package handler;

message DeviceActivationResponse {
  bytes                        payload              = 1;
  string                       app_id               = 2;
  broker.DownlinkOption        downlink_option      = 11;
  protocol.ActivationMetadata  activation_metadata  = 23;
}

// The Handler service provides pure network functionality
service Handler {
  rpc ActivationChallenge(broker.ActivationChallengeRequest) returns (broker.ActivationChallengeResponse);
  rpc Activate(broker.DeduplicatedDeviceActivationRequest) returns (DeviceActivationResponse);
}

// message StatusRequest is used to request the status of this Handler
message StatusRequest {}

// message Status is the response to the StatusRequest
message Status {}

message ApplicationIdentifier {
  string app_id      = 1;
}

message Application {
  string app_id      = 1;
  string decoder     = 2;
  string converter   = 3;
  string validator   = 4;
  string encoder     = 5;
}

message DeviceIdentifier {
  string app_id      = 1;
  string dev_id      = 2;
}

message Device {
  string app_id      = 1;
  string dev_id      = 2;
  oneof device {
    lorawan.Device lorawan_device = 3;
  }
}

message DeviceList {
  repeated Device devices = 1;
}

message DryDownlinkMessage {
  bytes  payload  = 1;
  string fields   = 2;
  Application app = 3;
}

message DryUplinkMessage {
  bytes  payload  = 1;
  Application app = 2;
}

message DryUplinkResult {
  bytes  payload  = 1;
  string fields   = 2;
  bool   valid    = 3;
}

message DryDownlinkResult {
  bytes  payload  = 1;
}

service ApplicationManager {
  rpc RegisterApplication(ApplicationIdentifier) returns (google.protobuf.Empty);
  rpc GetApplication(ApplicationIdentifier) returns (Application);
  rpc SetApplication(Application) returns (google.protobuf.Empty);
  rpc DeleteApplication(ApplicationIdentifier) returns (google.protobuf.Empty);
  rpc GetDevice(DeviceIdentifier) returns (Device);
  rpc SetDevice(Device) returns (google.protobuf.Empty);
  rpc DeleteDevice(DeviceIdentifier) returns (google.protobuf.Empty);
  rpc GetDevicesForApplication(ApplicationIdentifier) returns (DeviceList);
  rpc DryDownlink(DryDownlinkMessage) returns (DryDownlinkResult);
  rpc DryUplink(DryUplinkMessage) returns (DryUplinkResult);
}

// The HandlerManager service provides configuration and monitoring
// functionality
service HandlerManager {
  rpc GetStatus(StatusRequest) returns (Status);
}
