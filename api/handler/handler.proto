// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "ttn/api/api.proto";
import "ttn/api/broker/broker.proto";
import "ttn/api/protocol/protocol.proto";
import "ttn/api/protocol/lorawan/device.proto";
import "ttn/api/trace/trace.proto";
import "ttn/utils/ttndoc/ttndoc.proto";

package handler;

option go_package = "github.com/TheThingsNetwork/ttn/api/handler";

message DeviceActivationResponse {
  bytes                        payload              = 1;
  protocol.Message             message              = 2;
  broker.DownlinkOption        downlink_option      = 11;
  protocol.ActivationMetadata  activation_metadata  = 23;

  trace.Trace                  trace                = 31;
}

// The Handler service provides pure network functionality
service Handler {
  rpc ActivationChallenge(broker.ActivationChallengeRequest) returns (broker.ActivationChallengeResponse);
  rpc Activate(broker.DeduplicatedDeviceActivationRequest) returns (DeviceActivationResponse);
}

// message StatusRequest is used to request the status of this Handler
message StatusRequest {}

// message Status is the response to the StatusRequest
message Status {
  api.SystemStats    system    = 1;
  api.ComponentStats component = 2;

  api.Rates uplink      = 11;
  api.Rates downlink    = 12;
  api.Rates activations = 13;
}

message ApplicationIdentifier {
  string app_id      = 1;
}

// The Application settings
message Application {
  string app_id         = 1;

  // The payload format indicates how payload is formatted.
  string payload_format = 6;

  // The decoder is a JavaScript function that decodes a byte array to an object.
  // This function is used when the payload format is set to custom.
  string decoder        = 2;

  // The converter is a JavaScript function that can be used to convert values
  // in the object returned from the decoder. This can for example be useful to
  // convert a voltage to a temperature. This function is used when the payload format is set to custom.
  string converter      = 3;

  // The validator is a JavaScript function that checks the validity of the
  // object returned by the decoder or converter. If validation fails, the
  // message is dropped. This function is used when the payload format is set to custom.
  string validator      = 4;

  // The encoder is a JavaScript function that encodes an object to a byte array.
  // This function is used when the payload format is set to custom.
  string encoder        = 5;
}

message DeviceIdentifier {
  string app_id      = 1;
  string dev_id      = 2;
}

// The Device settings
message Device {
  string app_id      = 1;
  string dev_id      = 2;

  // The device can be of different kinds
  oneof device {
    lorawan.Device lorawan_device = 3;
  }

  float latitude  = 10;
  float longitude = 11;
  int32 altitude  = 12;

  string description = 20;
}

message DeviceList {
  repeated Device devices = 1;
}

// DryDownlinkMessage is a simulated message to test downlink processing
message DryDownlinkMessage {
  // The binary payload to use
  bytes  payload  = 1;
  // JSON-encoded object with fields to encode
  string fields   = 2;
  // The Application containing the payload functions that should be executed
  Application app = 3;
  // The port number that should be passed to the payload function
  uint32 port     = 4;
}

// DryUplinkMessage is a simulated message to test uplink processing
message DryUplinkMessage {
  // The binary payload to use
  bytes  payload  = 1;
  // The Application containing the payload functions that should be executed
  Application app = 2;
  // The port number that should be passed to the payload function
  uint32 port     = 3;
}

// SimulatedUplinkMessage is a simulated uplink message
message SimulatedUplinkMessage {
  string app_id       = 1;
  string dev_id       = 2;

  // The binary payload to use
  bytes  payload      = 3;
  // The port number
  uint32 port         = 4;
}

message LogEntry {
  // The location where the log was created (what payload function)
  string          function = 1;

  // A list of JSON-encoded fields that were logged
  repeated string fields   = 2;
}

// DryUplinkResult is the result from an uplink simulation
message DryUplinkResult {
  // The binary payload
  bytes             payload = 1;
  // The decoded fields
  string            fields  = 2;
  // Was validation of the message successful
  bool              valid   = 3;
  // Logs that have been generated while processing
  repeated LogEntry logs    = 4;
}

// DryDownlinkResult is the result from a downlink simulation
message DryDownlinkResult {
  // The payload that was encoded
  bytes             payload = 1;
  // Logs that have been generated while processing
  repeated LogEntry logs    = 2;
}

// ApplicationManager manages application and device registrations on the Handler
//
// To protect our quality of service, you can make up to 5000 calls to the
// ApplicationManager API per hour. Once you go over the rate limit, you will
// receive an error response.
service ApplicationManager {
  option (ttndoc.document_service) = true;

  // Applications should first be registered to the Handler with the `RegisterApplication` method
  rpc RegisterApplication(ApplicationIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/applications"
      body: "*"
    };
  }

  // GetApplication returns the application with the given identifier (app_id)
  rpc GetApplication(ApplicationIdentifier) returns (Application) {
    option (google.api.http) = {
      get: "/applications/{app_id}"
    };
  }

  // SetApplication updates the settings for the application. All fields must be supplied.
  rpc SetApplication(Application) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/applications/{app_id}"
      body: "*"
      additional_bindings {
				put: "/applications/{app_id}"
        body: "*"
			}
    };
  }

  // DeleteApplication deletes the application with the given identifier (app_id)
  rpc DeleteApplication(ApplicationIdentifier) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/applications/{app_id}"
    };
  }

  // GetDevice returns the device with the given identifier (app_id and dev_id)
  rpc GetDevice(DeviceIdentifier) returns (Device) {
    option (google.api.http) = {
      get: "/applications/{app_id}/devices/{dev_id}"
    };
  }

  // SetDevice creates or updates a device. All fields must be supplied.
  rpc SetDevice(Device) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/applications/{app_id}/devices/{dev_id}"
      body: "*"
      additional_bindings {
				put: "/applications/{app_id}/devices/{dev_id}"
        body: "*"
			}
      additional_bindings {
				post: "/applications/{app_id}/devices"
        body: "*"
			}
      additional_bindings {
				put: "/applications/{app_id}/devices"
        body: "*"
			}
    };
  }

  // DeleteDevice deletes the device with the given identifier (app_id and dev_id)
  rpc DeleteDevice(DeviceIdentifier) returns (google.protobuf.Empty)  {
    option (google.api.http) = {
      delete: "/applications/{app_id}/devices/{dev_id}"
    };
  }

  // GetDevicesForApplication returns all devices that belong to the application with the given identifier (app_id)
  rpc GetDevicesForApplication(ApplicationIdentifier) returns (DeviceList) {
    option (google.api.http) = {
      get: "/applications/{app_id}/devices"
    };
  }

  // DryUplink simulates processing a downlink message and returns the result
  rpc DryDownlink(DryDownlinkMessage) returns (DryDownlinkResult);

  // DryUplink simulates processing an uplink message and returns the result
  rpc DryUplink(DryUplinkMessage) returns (DryUplinkResult);

  // SimulateUplink simulates an uplink message
  rpc SimulateUplink(SimulatedUplinkMessage) returns (google.protobuf.Empty);
}

// The HandlerManager service provides configuration and monitoring
// functionality
service HandlerManager {
  rpc GetStatus(StatusRequest) returns (Status);
}
