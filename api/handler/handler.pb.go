// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/handler/handler.proto
// DO NOT EDIT!

/*
	Package handler is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/handler/handler.proto

	It has these top-level messages:
		DeviceActivationResponse
		StatusRequest
		Status
		ApplicationIdentifier
		Application
		DeviceIdentifier
		Device
		DeviceList
		DryDownlinkMessage
		DryUplinkMessage
		DryUplinkResult
		DryDownlinkResult
*/
package handler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import api "github.com/TheThingsNetwork/ttn/api"
import broker "github.com/TheThingsNetwork/ttn/api/broker"
import protocol "github.com/TheThingsNetwork/ttn/api/protocol"
import lorawan1 "github.com/TheThingsNetwork/ttn/api/protocol/lorawan"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceActivationResponse struct {
	Payload            []byte                       `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	AppId              string                       `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DownlinkOption     *broker.DownlinkOption       `protobuf:"bytes,11,opt,name=downlink_option,json=downlinkOption" json:"downlink_option,omitempty"`
	ActivationMetadata *protocol.ActivationMetadata `protobuf:"bytes,23,opt,name=activation_metadata,json=activationMetadata" json:"activation_metadata,omitempty"`
}

func (m *DeviceActivationResponse) Reset()                    { *m = DeviceActivationResponse{} }
func (m *DeviceActivationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceActivationResponse) ProtoMessage()               {}
func (*DeviceActivationResponse) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{0} }

func (m *DeviceActivationResponse) GetDownlinkOption() *broker.DownlinkOption {
	if m != nil {
		return m.DownlinkOption
	}
	return nil
}

func (m *DeviceActivationResponse) GetActivationMetadata() *protocol.ActivationMetadata {
	if m != nil {
		return m.ActivationMetadata
	}
	return nil
}

// message StatusRequest is used to request the status of this Handler
type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{1} }

// message Status is the response to the StatusRequest
type Status struct {
	System      *api.SystemStats    `protobuf:"bytes,1,opt,name=system" json:"system,omitempty"`
	Component   *api.ComponentStats `protobuf:"bytes,2,opt,name=component" json:"component,omitempty"`
	Uplink      *api.Rates          `protobuf:"bytes,11,opt,name=uplink" json:"uplink,omitempty"`
	Downlink    *api.Rates          `protobuf:"bytes,12,opt,name=downlink" json:"downlink,omitempty"`
	Activations *api.Rates          `protobuf:"bytes,13,opt,name=activations" json:"activations,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{2} }

func (m *Status) GetSystem() *api.SystemStats {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Status) GetComponent() *api.ComponentStats {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *Status) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *Status) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *Status) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

type ApplicationIdentifier struct {
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *ApplicationIdentifier) Reset()                    { *m = ApplicationIdentifier{} }
func (m *ApplicationIdentifier) String() string            { return proto.CompactTextString(m) }
func (*ApplicationIdentifier) ProtoMessage()               {}
func (*ApplicationIdentifier) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{3} }

type Application struct {
	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Decoder   string `protobuf:"bytes,2,opt,name=decoder,proto3" json:"decoder,omitempty"`
	Converter string `protobuf:"bytes,3,opt,name=converter,proto3" json:"converter,omitempty"`
	Validator string `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	Encoder   string `protobuf:"bytes,5,opt,name=encoder,proto3" json:"encoder,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{4} }

type DeviceIdentifier struct {
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevId string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
}

func (m *DeviceIdentifier) Reset()                    { *m = DeviceIdentifier{} }
func (m *DeviceIdentifier) String() string            { return proto.CompactTextString(m) }
func (*DeviceIdentifier) ProtoMessage()               {}
func (*DeviceIdentifier) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{5} }

type Device struct {
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevId string `protobuf:"bytes,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	// Types that are valid to be assigned to Device:
	//	*Device_LorawanDevice
	Device isDevice_Device `protobuf_oneof:"device"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{6} }

type isDevice_Device interface {
	isDevice_Device()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Device_LorawanDevice struct {
	LorawanDevice *lorawan1.Device `protobuf:"bytes,3,opt,name=lorawan_device,json=lorawanDevice,oneof"`
}

func (*Device_LorawanDevice) isDevice_Device() {}

func (m *Device) GetDevice() isDevice_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Device) GetLorawanDevice() *lorawan1.Device {
	if x, ok := m.GetDevice().(*Device_LorawanDevice); ok {
		return x.LorawanDevice
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Device) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Device_OneofMarshaler, _Device_OneofUnmarshaler, _Device_OneofSizer, []interface{}{
		(*Device_LorawanDevice)(nil),
	}
}

func _Device_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Device)
	// device
	switch x := m.Device.(type) {
	case *Device_LorawanDevice:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LorawanDevice); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Device.Device has unexpected type %T", x)
	}
	return nil
}

func _Device_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Device)
	switch tag {
	case 3: // device.lorawan_device
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(lorawan1.Device)
		err := b.DecodeMessage(msg)
		m.Device = &Device_LorawanDevice{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Device_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Device)
	// device
	switch x := m.Device.(type) {
	case *Device_LorawanDevice:
		s := proto.Size(x.LorawanDevice)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeviceList struct {
	Devices []*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *DeviceList) Reset()                    { *m = DeviceList{} }
func (m *DeviceList) String() string            { return proto.CompactTextString(m) }
func (*DeviceList) ProtoMessage()               {}
func (*DeviceList) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{7} }

func (m *DeviceList) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type DryDownlinkMessage struct {
	Payload []byte       `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Fields  string       `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	App     *Application `protobuf:"bytes,3,opt,name=app" json:"app,omitempty"`
}

func (m *DryDownlinkMessage) Reset()                    { *m = DryDownlinkMessage{} }
func (m *DryDownlinkMessage) String() string            { return proto.CompactTextString(m) }
func (*DryDownlinkMessage) ProtoMessage()               {}
func (*DryDownlinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{8} }

func (m *DryDownlinkMessage) GetApp() *Application {
	if m != nil {
		return m.App
	}
	return nil
}

type DryUplinkMessage struct {
	Payload []byte       `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	App     *Application `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
}

func (m *DryUplinkMessage) Reset()                    { *m = DryUplinkMessage{} }
func (m *DryUplinkMessage) String() string            { return proto.CompactTextString(m) }
func (*DryUplinkMessage) ProtoMessage()               {}
func (*DryUplinkMessage) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{9} }

func (m *DryUplinkMessage) GetApp() *Application {
	if m != nil {
		return m.App
	}
	return nil
}

type DryUplinkResult struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Fields  string `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	Valid   bool   `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *DryUplinkResult) Reset()                    { *m = DryUplinkResult{} }
func (m *DryUplinkResult) String() string            { return proto.CompactTextString(m) }
func (*DryUplinkResult) ProtoMessage()               {}
func (*DryUplinkResult) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{10} }

type DryDownlinkResult struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *DryDownlinkResult) Reset()                    { *m = DryDownlinkResult{} }
func (m *DryDownlinkResult) String() string            { return proto.CompactTextString(m) }
func (*DryDownlinkResult) ProtoMessage()               {}
func (*DryDownlinkResult) Descriptor() ([]byte, []int) { return fileDescriptorHandler, []int{11} }

func init() {
	proto.RegisterType((*DeviceActivationResponse)(nil), "handler.DeviceActivationResponse")
	proto.RegisterType((*StatusRequest)(nil), "handler.StatusRequest")
	proto.RegisterType((*Status)(nil), "handler.Status")
	proto.RegisterType((*ApplicationIdentifier)(nil), "handler.ApplicationIdentifier")
	proto.RegisterType((*Application)(nil), "handler.Application")
	proto.RegisterType((*DeviceIdentifier)(nil), "handler.DeviceIdentifier")
	proto.RegisterType((*Device)(nil), "handler.Device")
	proto.RegisterType((*DeviceList)(nil), "handler.DeviceList")
	proto.RegisterType((*DryDownlinkMessage)(nil), "handler.DryDownlinkMessage")
	proto.RegisterType((*DryUplinkMessage)(nil), "handler.DryUplinkMessage")
	proto.RegisterType((*DryUplinkResult)(nil), "handler.DryUplinkResult")
	proto.RegisterType((*DryDownlinkResult)(nil), "handler.DryDownlinkResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Handler service

type HandlerClient interface {
	ActivationChallenge(ctx context.Context, in *broker.ActivationChallengeRequest, opts ...grpc.CallOption) (*broker.ActivationChallengeResponse, error)
	Activate(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error)
}

type handlerClient struct {
	cc *grpc.ClientConn
}

func NewHandlerClient(cc *grpc.ClientConn) HandlerClient {
	return &handlerClient{cc}
}

func (c *handlerClient) ActivationChallenge(ctx context.Context, in *broker.ActivationChallengeRequest, opts ...grpc.CallOption) (*broker.ActivationChallengeResponse, error) {
	out := new(broker.ActivationChallengeResponse)
	err := grpc.Invoke(ctx, "/handler.Handler/ActivationChallenge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Activate(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error) {
	out := new(DeviceActivationResponse)
	err := grpc.Invoke(ctx, "/handler.Handler/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Handler service

type HandlerServer interface {
	ActivationChallenge(context.Context, *broker.ActivationChallengeRequest) (*broker.ActivationChallengeResponse, error)
	Activate(context.Context, *broker.DeduplicatedDeviceActivationRequest) (*DeviceActivationResponse, error)
}

func RegisterHandlerServer(s *grpc.Server, srv HandlerServer) {
	s.RegisterService(&_Handler_serviceDesc, srv)
}

func _Handler_ActivationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.ActivationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).ActivationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.Handler/ActivationChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).ActivationChallenge(ctx, req.(*broker.ActivationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.Handler/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Activate(ctx, req.(*broker.DeduplicatedDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Handler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handler.Handler",
	HandlerType: (*HandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivationChallenge",
			Handler:    _Handler_ActivationChallenge_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Handler_Activate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorHandler,
}

// Client API for ApplicationManager service

type ApplicationManagerClient interface {
	RegisterApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error)
	SetApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error)
	SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetDevicesForApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*DeviceList, error)
	DryDownlink(ctx context.Context, in *DryDownlinkMessage, opts ...grpc.CallOption) (*DryDownlinkResult, error)
	DryUplink(ctx context.Context, in *DryUplinkMessage, opts ...grpc.CallOption) (*DryUplinkResult, error)
}

type applicationManagerClient struct {
	cc *grpc.ClientConn
}

func NewApplicationManagerClient(cc *grpc.ClientConn) ApplicationManagerClient {
	return &applicationManagerClient{cc}
}

func (c *applicationManagerClient) RegisterApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/RegisterApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) SetApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/SetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DeleteApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DeleteApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/SetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) GetDevicesForApplication(ctx context.Context, in *ApplicationIdentifier, opts ...grpc.CallOption) (*DeviceList, error) {
	out := new(DeviceList)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/GetDevicesForApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DryDownlink(ctx context.Context, in *DryDownlinkMessage, opts ...grpc.CallOption) (*DryDownlinkResult, error) {
	out := new(DryDownlinkResult)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DryDownlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagerClient) DryUplink(ctx context.Context, in *DryUplinkMessage, opts ...grpc.CallOption) (*DryUplinkResult, error) {
	out := new(DryUplinkResult)
	err := grpc.Invoke(ctx, "/handler.ApplicationManager/DryUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationManager service

type ApplicationManagerServer interface {
	RegisterApplication(context.Context, *ApplicationIdentifier) (*google_protobuf.Empty, error)
	GetApplication(context.Context, *ApplicationIdentifier) (*Application, error)
	SetApplication(context.Context, *Application) (*google_protobuf.Empty, error)
	DeleteApplication(context.Context, *ApplicationIdentifier) (*google_protobuf.Empty, error)
	GetDevice(context.Context, *DeviceIdentifier) (*Device, error)
	SetDevice(context.Context, *Device) (*google_protobuf.Empty, error)
	DeleteDevice(context.Context, *DeviceIdentifier) (*google_protobuf.Empty, error)
	GetDevicesForApplication(context.Context, *ApplicationIdentifier) (*DeviceList, error)
	DryDownlink(context.Context, *DryDownlinkMessage) (*DryDownlinkResult, error)
	DryUplink(context.Context, *DryUplinkMessage) (*DryUplinkResult, error)
}

func RegisterApplicationManagerServer(s *grpc.Server, srv ApplicationManagerServer) {
	s.RegisterService(&_ApplicationManager_serviceDesc, srv)
}

func _ApplicationManager_RegisterApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).RegisterApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/RegisterApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).RegisterApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_SetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).SetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/SetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).SetApplication(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DeleteApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_SetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).SetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/SetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).SetDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DeleteDevice(ctx, req.(*DeviceIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_GetDevicesForApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).GetDevicesForApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/GetDevicesForApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).GetDevicesForApplication(ctx, req.(*ApplicationIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DryDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DryDownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DryDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DryDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DryDownlink(ctx, req.(*DryDownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManager_DryUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DryUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).DryUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.ApplicationManager/DryUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).DryUplink(ctx, req.(*DryUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handler.ApplicationManager",
	HandlerType: (*ApplicationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterApplication",
			Handler:    _ApplicationManager_RegisterApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationManager_GetApplication_Handler,
		},
		{
			MethodName: "SetApplication",
			Handler:    _ApplicationManager_SetApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ApplicationManager_DeleteApplication_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _ApplicationManager_GetDevice_Handler,
		},
		{
			MethodName: "SetDevice",
			Handler:    _ApplicationManager_SetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _ApplicationManager_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDevicesForApplication",
			Handler:    _ApplicationManager_GetDevicesForApplication_Handler,
		},
		{
			MethodName: "DryDownlink",
			Handler:    _ApplicationManager_DryDownlink_Handler,
		},
		{
			MethodName: "DryUplink",
			Handler:    _ApplicationManager_DryUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorHandler,
}

// Client API for HandlerManager service

type HandlerManagerClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
}

type handlerManagerClient struct {
	cc *grpc.ClientConn
}

func NewHandlerManagerClient(cc *grpc.ClientConn) HandlerManagerClient {
	return &handlerManagerClient{cc}
}

func (c *handlerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/handler.HandlerManager/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HandlerManager service

type HandlerManagerServer interface {
	GetStatus(context.Context, *StatusRequest) (*Status, error)
}

func RegisterHandlerManagerServer(s *grpc.Server, srv HandlerManagerServer) {
	s.RegisterService(&_HandlerManager_serviceDesc, srv)
}

func _HandlerManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/handler.HandlerManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HandlerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "handler.HandlerManager",
	HandlerType: (*HandlerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _HandlerManager_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorHandler,
}

func (m *DeviceActivationResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeviceActivationResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if len(m.AppId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	if m.DownlinkOption != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintHandler(data, i, uint64(m.DownlinkOption.Size()))
		n1, err := m.DownlinkOption.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ActivationMetadata != nil {
		data[i] = 0xba
		i++
		data[i] = 0x1
		i++
		i = encodeVarintHandler(data, i, uint64(m.ActivationMetadata.Size()))
		n2, err := m.ActivationMetadata.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Status) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Status) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.System != nil {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(m.System.Size()))
		n3, err := m.System.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Component != nil {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(m.Component.Size()))
		n4, err := m.Component.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Uplink != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintHandler(data, i, uint64(m.Uplink.Size()))
		n5, err := m.Uplink.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Downlink != nil {
		data[i] = 0x62
		i++
		i = encodeVarintHandler(data, i, uint64(m.Downlink.Size()))
		n6, err := m.Downlink.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Activations != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintHandler(data, i, uint64(m.Activations.Size()))
		n7, err := m.Activations.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ApplicationIdentifier) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ApplicationIdentifier) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	return i, nil
}

func (m *Application) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Application) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	if len(m.Decoder) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Decoder)))
		i += copy(data[i:], m.Decoder)
	}
	if len(m.Converter) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Converter)))
		i += copy(data[i:], m.Converter)
	}
	if len(m.Validator) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Validator)))
		i += copy(data[i:], m.Validator)
	}
	if len(m.Encoder) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Encoder)))
		i += copy(data[i:], m.Encoder)
	}
	return i, nil
}

func (m *DeviceIdentifier) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeviceIdentifier) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	if len(m.DevId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.DevId)))
		i += copy(data[i:], m.DevId)
	}
	return i, nil
}

func (m *Device) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Device) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	if len(m.DevId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.DevId)))
		i += copy(data[i:], m.DevId)
	}
	if m.Device != nil {
		nn8, err := m.Device.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *Device_LorawanDevice) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.LorawanDevice != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintHandler(data, i, uint64(m.LorawanDevice.Size()))
		n9, err := m.LorawanDevice.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *DeviceList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeviceList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, msg := range m.Devices {
			data[i] = 0xa
			i++
			i = encodeVarintHandler(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DryDownlinkMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DryDownlinkMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if len(m.Fields) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Fields)))
		i += copy(data[i:], m.Fields)
	}
	if m.App != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintHandler(data, i, uint64(m.App.Size()))
		n10, err := m.App.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *DryUplinkMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DryUplinkMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.App != nil {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(m.App.Size()))
		n11, err := m.App.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *DryUplinkResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DryUplinkResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if len(m.Fields) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Fields)))
		i += copy(data[i:], m.Fields)
	}
	if m.Valid {
		data[i] = 0x18
		i++
		if m.Valid {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DryDownlinkResult) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DryDownlinkResult) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintHandler(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	return i, nil
}

func encodeFixed64Handler(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Handler(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHandler(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceActivationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.DownlinkOption != nil {
		l = m.DownlinkOption.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.ActivationMetadata != nil {
		l = m.ActivationMetadata.Size()
		n += 2 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Component != nil {
		l = m.Component.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *ApplicationIdentifier) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Decoder)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Converter)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Encoder)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *DeviceIdentifier) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.DevId)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *Device) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.DevId)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Device != nil {
		n += m.Device.Size()
	}
	return n
}

func (m *Device_LorawanDevice) Size() (n int) {
	var l int
	_ = l
	if m.LorawanDevice != nil {
		l = m.LorawanDevice.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}
func (m *DeviceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovHandler(uint64(l))
		}
	}
	return n
}

func (m *DryDownlinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *DryUplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func (m *DryUplinkResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	if m.Valid {
		n += 2
	}
	return n
}

func (m *DryDownlinkResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovHandler(uint64(l))
	}
	return n
}

func sovHandler(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHandler(x uint64) (n int) {
	return sovHandler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceActivationResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkOption == nil {
				m.DownlinkOption = &broker.DownlinkOption{}
			}
			if err := m.DownlinkOption.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationMetadata == nil {
				m.ActivationMetadata = &protocol.ActivationMetadata{}
			}
			if err := m.ActivationMetadata.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &api.SystemStats{}
			}
			if err := m.System.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Component == nil {
				m.Component = &api.ComponentStats{}
			}
			if err := m.Component.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationIdentifier) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decoder = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Converter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Converter = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoder = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceIdentifier) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LorawanDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &lorawan1.Device{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Device = &Device_LorawanDevice{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &Device{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryDownlinkMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryDownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryDownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &Application{}
			}
			if err := m.App.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryUplinkMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryUplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryUplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &Application{}
			}
			if err := m.App.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryUplinkResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryUplinkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryUplinkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DryDownlinkResult) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DryDownlinkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DryDownlinkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHandler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHandler(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHandler(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHandler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHandler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHandler(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHandler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHandler   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/handler/handler.proto", fileDescriptorHandler)
}

var fileDescriptorHandler = []byte{
	// 987 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xef, 0x25, 0xc4, 0x49, 0xc6, 0xf9, 0xbb, 0x6e, 0xc2, 0xd5, 0x8e, 0x4c, 0x7a, 0x40, 0x15,
	0x28, 0xdc, 0x09, 0x53, 0xa9, 0x80, 0x84, 0x68, 0x5a, 0x93, 0x36, 0x82, 0x50, 0xe9, 0x12, 0x1e,
	0xe8, 0x03, 0xd1, 0xc6, 0x3b, 0xb1, 0x8f, 0x9c, 0x6f, 0x8f, 0xdb, 0xb5, 0x23, 0x83, 0x78, 0xe1,
	0x2b, 0xc0, 0x03, 0xdf, 0x81, 0xcf, 0x81, 0xc4, 0x23, 0x12, 0x8f, 0x3c, 0x80, 0x02, 0x1f, 0x04,
	0xdd, 0xee, 0xde, 0xf9, 0xe2, 0x3f, 0x0d, 0x41, 0x7d, 0xb2, 0x67, 0x7e, 0xbf, 0xfd, 0xcd, 0xce,
	0xce, 0xce, 0xec, 0xc1, 0xfb, 0xed, 0x40, 0x76, 0x7a, 0x27, 0x6e, 0x8b, 0x77, 0xbd, 0xa3, 0x0e,
	0x1e, 0x75, 0x82, 0xa8, 0x2d, 0x3e, 0x43, 0x79, 0xce, 0x93, 0x33, 0x4f, 0xca, 0xc8, 0xa3, 0x71,
	0xe0, 0x75, 0x68, 0xc4, 0x42, 0x4c, 0xb2, 0x5f, 0x37, 0x4e, 0xb8, 0xe4, 0x64, 0xde, 0x98, 0xd5,
	0x5a, 0x9b, 0xf3, 0x76, 0x88, 0x9e, 0x72, 0x9f, 0xf4, 0x4e, 0x3d, 0xec, 0xc6, 0x72, 0xa0, 0x59,
	0xd5, 0x2d, 0x03, 0xa6, 0x3a, 0x34, 0x8a, 0xb8, 0xa4, 0x32, 0xe0, 0x91, 0x30, 0xe8, 0x7a, 0x16,
	0x82, 0xc6, 0x81, 0x71, 0xd5, 0x32, 0xd7, 0x49, 0xc2, 0xcf, 0x30, 0x31, 0x3f, 0x06, 0x7c, 0x25,
	0x03, 0x95, 0xd9, 0xe2, 0x61, 0xfe, 0xc7, 0x10, 0x5e, 0x1f, 0x23, 0x84, 0x3c, 0xa1, 0xe7, 0x34,
	0xf2, 0x18, 0xf6, 0x83, 0x16, 0x6a, 0x9a, 0xf3, 0x87, 0x05, 0x76, 0x53, 0x39, 0x76, 0x5b, 0x32,
	0xe8, 0xab, 0x3d, 0xf9, 0x28, 0x62, 0x1e, 0x09, 0x24, 0x36, 0xcc, 0xc7, 0x74, 0x10, 0x72, 0xca,
	0x6c, 0x6b, 0xdb, 0xda, 0x59, 0xf2, 0x33, 0x93, 0x6c, 0x40, 0x89, 0xc6, 0xf1, 0x71, 0xc0, 0xec,
	0x99, 0x6d, 0x6b, 0x67, 0xd1, 0x9f, 0xa3, 0x71, 0xbc, 0xcf, 0xc8, 0x47, 0xb0, 0xca, 0xf8, 0x79,
	0x14, 0x06, 0xd1, 0xd9, 0x31, 0x8f, 0x53, 0x2d, 0xbb, 0xbc, 0x6d, 0xed, 0x94, 0x1b, 0x9b, 0xae,
	0xd9, 0x7d, 0xd3, 0xc0, 0x4f, 0x15, 0xea, 0xaf, 0xb0, 0x4b, 0x36, 0x39, 0x80, 0x0a, 0xcd, 0xf7,
	0x71, 0xdc, 0x45, 0x49, 0x19, 0x95, 0xd4, 0x7e, 0x59, 0x89, 0x6c, 0xb9, 0x79, 0x8e, 0xc3, 0xcd,
	0x1e, 0x18, 0x8e, 0x4f, 0xe8, 0x98, 0xcf, 0x59, 0x85, 0xe5, 0x43, 0x49, 0x65, 0x4f, 0xf8, 0xf8,
	0x75, 0x0f, 0x85, 0x74, 0xfe, 0xb4, 0xa0, 0xa4, 0x3d, 0x64, 0x07, 0x4a, 0x62, 0x20, 0x24, 0x76,
	0x55, 0x6e, 0xe5, 0xc6, 0x9a, 0x9b, 0x1e, 0xfd, 0xa1, 0x72, 0xa5, 0x14, 0xe1, 0x1b, 0x9c, 0xbc,
	0x03, 0x8b, 0x2d, 0xde, 0x8d, 0x79, 0x84, 0x91, 0x54, 0xf9, 0x96, 0x1b, 0x15, 0x45, 0x7e, 0x94,
	0x79, 0x35, 0x7f, 0xc8, 0x22, 0x0e, 0x94, 0x7a, 0x71, 0x9a, 0x97, 0xc9, 0x1f, 0x14, 0xdf, 0xa7,
	0x12, 0x85, 0x6f, 0x10, 0x72, 0x07, 0x16, 0xb2, 0xec, 0xed, 0xa5, 0x31, 0x56, 0x8e, 0x91, 0xb7,
	0xa0, 0x3c, 0x4c, 0x4d, 0xd8, 0xcb, 0x63, 0xd4, 0x22, 0xec, 0xb8, 0xb0, 0xb1, 0x1b, 0xc7, 0x61,
	0xd0, 0x52, 0xf6, 0x3e, 0xc3, 0x48, 0x06, 0xa7, 0x01, 0x26, 0x85, 0x92, 0x59, 0x85, 0x92, 0x39,
	0x3f, 0x5a, 0x50, 0x2e, 0x2c, 0x98, 0x42, 0x4b, 0xaf, 0x02, 0xc3, 0x16, 0x67, 0x98, 0x98, 0x8a,
	0x67, 0x26, 0xd9, 0x4a, 0x4f, 0x27, 0xea, 0x63, 0x22, 0x31, 0xb1, 0x67, 0x15, 0x36, 0x74, 0xa4,
	0x68, 0x9f, 0x86, 0x01, 0xa3, 0x92, 0x27, 0xf6, 0x4b, 0x1a, 0xcd, 0x1d, 0xa9, 0x2a, 0x46, 0x5a,
	0x75, 0x4e, 0xab, 0x1a, 0xd3, 0x79, 0x00, 0x6b, 0xfa, 0x5a, 0x5e, 0x99, 0x41, 0xea, 0x66, 0xd8,
	0x2f, 0xdc, 0x45, 0x86, 0xfd, 0x7d, 0xe6, 0x7c, 0x03, 0x25, 0xad, 0x70, 0xbd, 0x75, 0xe4, 0x3d,
	0x58, 0x31, 0x9d, 0x72, 0xac, 0x3b, 0x45, 0x25, 0x55, 0x6e, 0xac, 0xba, 0xc6, 0xed, 0x6a, 0xd9,
	0x27, 0x37, 0xfc, 0x65, 0xe3, 0xd1, 0x8e, 0x87, 0x0b, 0x4a, 0x30, 0x68, 0xa1, 0x73, 0x1f, 0x40,
	0xfb, 0x3e, 0x0d, 0x84, 0x24, 0x6f, 0xa4, 0x67, 0x97, 0x5a, 0xc2, 0xb6, 0xb6, 0x67, 0x95, 0x54,
	0x36, 0x40, 0x34, 0xcb, 0xcf, 0x70, 0x27, 0x02, 0xd2, 0x4c, 0x06, 0x59, 0x93, 0x1c, 0xa0, 0x10,
	0xb4, 0xfd, 0xbc, 0x3e, 0xdc, 0x84, 0xd2, 0x69, 0x80, 0x21, 0x13, 0x26, 0x07, 0x63, 0x91, 0x3b,
	0x30, 0x4b, 0xe3, 0xd8, 0xec, 0xfc, 0x66, 0x1e, 0xae, 0x50, 0x68, 0x3f, 0x25, 0x38, 0x47, 0xb0,
	0xd6, 0x4c, 0x06, 0x9f, 0xc7, 0xff, 0x2d, 0x9a, 0x51, 0x9d, 0xb9, 0x4a, 0xf5, 0x0b, 0x58, 0xcd,
	0x55, 0x7d, 0x14, 0xbd, 0x50, 0xfe, 0x8f, 0x14, 0x6e, 0xc2, 0x9c, 0xba, 0x28, 0x2a, 0x89, 0x05,
	0x5f, 0x1b, 0xce, 0xdb, 0xb0, 0x5e, 0x38, 0xa0, 0xab, 0xc4, 0x1b, 0xbf, 0x58, 0x30, 0xff, 0x44,
	0x6f, 0x93, 0x7c, 0x09, 0x95, 0xe1, 0xd8, 0x78, 0xd4, 0xa1, 0x61, 0x88, 0x51, 0x1b, 0x89, 0x93,
	0x8d, 0xa6, 0x09, 0xa0, 0x19, 0x1b, 0xd5, 0x57, 0x9f, 0xcb, 0x31, 0xd3, 0xf2, 0x19, 0x2c, 0x18,
	0x18, 0xc9, 0xdd, 0x7c, 0xde, 0x21, 0xeb, 0xe9, 0xd3, 0x41, 0x36, 0x3e, 0x67, 0xb5, 0xfa, 0xed,
	0x91, 0xeb, 0x30, 0x3e, 0x89, 0x1b, 0x3f, 0x97, 0x80, 0x14, 0x8e, 0xf9, 0x80, 0x46, 0xb4, 0x8d,
	0x09, 0xf9, 0x0a, 0x2a, 0x3e, 0xb6, 0x03, 0x21, 0x31, 0x29, 0xf6, 0x70, 0x7d, 0x52, 0x69, 0x86,
	0x8d, 0x54, 0xdd, 0x74, 0xf5, 0x5b, 0xe4, 0x66, 0x0f, 0x95, 0xfb, 0x71, 0xfa, 0x50, 0x39, 0xb5,
	0xef, 0x7f, 0xff, 0xe7, 0x87, 0x99, 0x0d, 0x67, 0xcd, 0xeb, 0x37, 0x3c, 0x3a, 0x5c, 0x2a, 0x3e,
	0xb0, 0xde, 0x24, 0x01, 0xac, 0x3c, 0x46, 0x79, 0x9d, 0x30, 0x13, 0x6f, 0x88, 0x73, 0x5b, 0x05,
	0xa9, 0x91, 0x5b, 0xa3, 0x41, 0xbc, 0x6f, 0x75, 0x97, 0x7e, 0x47, 0x18, 0xac, 0x1c, 0x5e, 0x0e,
	0x35, 0x51, 0x6a, 0x6a, 0x1e, 0xaf, 0xa9, 0x10, 0x75, 0x67, 0x7a, 0x88, 0x34, 0xa1, 0x4f, 0x60,
	0xbd, 0x89, 0x21, 0x4a, 0x7c, 0x01, 0x47, 0x47, 0xee, 0xc3, 0xe2, 0x63, 0x94, 0x66, 0xe0, 0xdc,
	0x1a, 0x29, 0x68, 0x61, 0xfd, 0x68, 0xeb, 0x93, 0x7b, 0xb0, 0x78, 0x98, 0x2f, 0x1c, 0x45, 0xa7,
	0x86, 0xdb, 0x85, 0x25, 0xbd, 0xf7, 0xab, 0x23, 0x4e, 0x93, 0x78, 0x0a, 0x76, 0xbe, 0x63, 0xb1,
	0xc7, 0xaf, 0x75, 0x81, 0x2a, 0x23, 0xe1, 0xd4, 0x98, 0xdb, 0x83, 0x72, 0xa1, 0x35, 0x49, 0x6d,
	0xc8, 0x19, 0x9b, 0x68, 0xd5, 0xea, 0x24, 0xd0, 0x74, 0xf3, 0x03, 0x58, 0xcc, 0xa7, 0x47, 0x31,
	0xb1, 0x91, 0x39, 0x55, 0xb5, 0xc7, 0x21, 0xad, 0xd0, 0xd8, 0x83, 0x15, 0xd3, 0xf4, 0x59, 0xa3,
	0xdc, 0x53, 0xe5, 0x31, 0x2f, 0xff, 0x66, 0xbe, 0xf0, 0xd2, 0xc7, 0x41, 0xa1, 0x36, 0xda, 0xff,
	0xf0, 0xc3, 0x5f, 0x2f, 0xea, 0xd6, 0x6f, 0x17, 0x75, 0xeb, 0xaf, 0x8b, 0xba, 0xf5, 0xd3, 0xdf,
	0xf5, 0x1b, 0xcf, 0xee, 0x5e, 0xe3, 0x2b, 0xf1, 0xa4, 0xa4, 0x4e, 0xfc, 0xdd, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xf6, 0x20, 0x83, 0x71, 0x5b, 0x0a, 0x00, 0x00,
}
