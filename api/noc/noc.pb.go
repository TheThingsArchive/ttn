// Code generated by protoc-gen-gogo.
// source: github.com/TheThingsNetwork/ttn/api/noc/noc.proto
// DO NOT EDIT!

/*
	Package noc is a generated protocol buffer package.

	It is generated from these files:
		github.com/TheThingsNetwork/ttn/api/noc/noc.proto

	It has these top-level messages:
*/
package noc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/TheThingsNetwork/ttn/api"
import gateway "github.com/TheThingsNetwork/ttn/api/gateway"
import router "github.com/TheThingsNetwork/ttn/api/router"
import broker "github.com/TheThingsNetwork/ttn/api/broker"
import handler "github.com/TheThingsNetwork/ttn/api/handler"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Monitoring service

type MonitoringClient interface {
	GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_GatewayStatusClient, error)
	RouterStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_RouterStatusClient, error)
	BrokerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_BrokerStatusClient, error)
	HandlerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_HandlerStatusClient, error)
}

type monitoringClient struct {
	cc *grpc.ClientConn
}

func NewMonitoringClient(cc *grpc.ClientConn) MonitoringClient {
	return &monitoringClient{cc}
}

func (c *monitoringClient) GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_GatewayStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitoring_serviceDesc.Streams[0], c.cc, "/noc.Monitoring/GatewayStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringGatewayStatusClient{stream}
	return x, nil
}

type Monitoring_GatewayStatusClient interface {
	Send(*gateway.Status) error
	CloseAndRecv() (*api.Ack, error)
	grpc.ClientStream
}

type monitoringGatewayStatusClient struct {
	grpc.ClientStream
}

func (x *monitoringGatewayStatusClient) Send(m *gateway.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringGatewayStatusClient) CloseAndRecv() (*api.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringClient) RouterStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_RouterStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitoring_serviceDesc.Streams[1], c.cc, "/noc.Monitoring/RouterStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringRouterStatusClient{stream}
	return x, nil
}

type Monitoring_RouterStatusClient interface {
	Send(*router.Status) error
	CloseAndRecv() (*api.Ack, error)
	grpc.ClientStream
}

type monitoringRouterStatusClient struct {
	grpc.ClientStream
}

func (x *monitoringRouterStatusClient) Send(m *router.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringRouterStatusClient) CloseAndRecv() (*api.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringClient) BrokerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_BrokerStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitoring_serviceDesc.Streams[2], c.cc, "/noc.Monitoring/BrokerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringBrokerStatusClient{stream}
	return x, nil
}

type Monitoring_BrokerStatusClient interface {
	Send(*broker.Status) error
	CloseAndRecv() (*api.Ack, error)
	grpc.ClientStream
}

type monitoringBrokerStatusClient struct {
	grpc.ClientStream
}

func (x *monitoringBrokerStatusClient) Send(m *broker.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringBrokerStatusClient) CloseAndRecv() (*api.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringClient) HandlerStatus(ctx context.Context, opts ...grpc.CallOption) (Monitoring_HandlerStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Monitoring_serviceDesc.Streams[3], c.cc, "/noc.Monitoring/HandlerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringHandlerStatusClient{stream}
	return x, nil
}

type Monitoring_HandlerStatusClient interface {
	Send(*handler.Status) error
	CloseAndRecv() (*api.Ack, error)
	grpc.ClientStream
}

type monitoringHandlerStatusClient struct {
	grpc.ClientStream
}

func (x *monitoringHandlerStatusClient) Send(m *handler.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringHandlerStatusClient) CloseAndRecv() (*api.Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(api.Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Monitoring service

type MonitoringServer interface {
	GatewayStatus(Monitoring_GatewayStatusServer) error
	RouterStatus(Monitoring_RouterStatusServer) error
	BrokerStatus(Monitoring_BrokerStatusServer) error
	HandlerStatus(Monitoring_HandlerStatusServer) error
}

func RegisterMonitoringServer(s *grpc.Server, srv MonitoringServer) {
	s.RegisterService(&_Monitoring_serviceDesc, srv)
}

func _Monitoring_GatewayStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringServer).GatewayStatus(&monitoringGatewayStatusServer{stream})
}

type Monitoring_GatewayStatusServer interface {
	SendAndClose(*api.Ack) error
	Recv() (*gateway.Status, error)
	grpc.ServerStream
}

type monitoringGatewayStatusServer struct {
	grpc.ServerStream
}

func (x *monitoringGatewayStatusServer) SendAndClose(m *api.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringGatewayStatusServer) Recv() (*gateway.Status, error) {
	m := new(gateway.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitoring_RouterStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringServer).RouterStatus(&monitoringRouterStatusServer{stream})
}

type Monitoring_RouterStatusServer interface {
	SendAndClose(*api.Ack) error
	Recv() (*router.Status, error)
	grpc.ServerStream
}

type monitoringRouterStatusServer struct {
	grpc.ServerStream
}

func (x *monitoringRouterStatusServer) SendAndClose(m *api.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringRouterStatusServer) Recv() (*router.Status, error) {
	m := new(router.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitoring_BrokerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringServer).BrokerStatus(&monitoringBrokerStatusServer{stream})
}

type Monitoring_BrokerStatusServer interface {
	SendAndClose(*api.Ack) error
	Recv() (*broker.Status, error)
	grpc.ServerStream
}

type monitoringBrokerStatusServer struct {
	grpc.ServerStream
}

func (x *monitoringBrokerStatusServer) SendAndClose(m *api.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringBrokerStatusServer) Recv() (*broker.Status, error) {
	m := new(broker.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monitoring_HandlerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringServer).HandlerStatus(&monitoringHandlerStatusServer{stream})
}

type Monitoring_HandlerStatusServer interface {
	SendAndClose(*api.Ack) error
	Recv() (*handler.Status, error)
	grpc.ServerStream
}

type monitoringHandlerStatusServer struct {
	grpc.ServerStream
}

func (x *monitoringHandlerStatusServer) SendAndClose(m *api.Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringHandlerStatusServer) Recv() (*handler.Status, error) {
	m := new(handler.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Monitoring_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noc.Monitoring",
	HandlerType: (*MonitoringServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatewayStatus",
			Handler:       _Monitoring_GatewayStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouterStatus",
			Handler:       _Monitoring_RouterStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BrokerStatus",
			Handler:       _Monitoring_BrokerStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HandlerStatus",
			Handler:       _Monitoring_HandlerStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorNoc,
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/ttn/api/noc/noc.proto", fileDescriptorNoc)
}

var fileDescriptorNoc = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0xc9, 0x48, 0x0d, 0xc9, 0xc8, 0xcc, 0x4b, 0x2f,
	0xf6, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x29, 0xc9, 0xd3, 0x4f, 0x2c, 0xc8, 0xd4,
	0xcf, 0xcb, 0x4f, 0x06, 0x61, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xe6, 0xbc, 0xfc, 0x64,
	0x29, 0x5d, 0x62, 0xf4, 0x25, 0x16, 0x64, 0x42, 0xf4, 0x48, 0x59, 0x12, 0xa3, 0x3c, 0x3d, 0xb1,
	0x24, 0xb5, 0x3c, 0xb1, 0x12, 0x46, 0x43, 0xb5, 0x9a, 0x13, 0xa3, 0xb5, 0x28, 0xbf, 0xb4, 0x24,
	0xb5, 0x08, 0x4a, 0x91, 0xa2, 0x31, 0xa9, 0x28, 0x3f, 0x3b, 0xb5, 0x08, 0x4a, 0x91, 0xe2, 0xd8,
	0x8c, 0xc4, 0xbc, 0x94, 0x9c, 0xd4, 0x22, 0x18, 0x0d, 0xd1, 0x6a, 0x74, 0x80, 0x91, 0x8b, 0xcb,
	0x37, 0x3f, 0x2f, 0xb3, 0x24, 0xbf, 0x28, 0x33, 0x2f, 0x5d, 0x48, 0x87, 0x8b, 0xd7, 0x1d, 0xe2,
	0x99, 0xe0, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x21, 0x7e, 0x3d, 0x98, 0xe7, 0x20, 0x02, 0x52, 0x1c,
	0x7a, 0xa0, 0x40, 0x72, 0x4c, 0xce, 0xd6, 0x60, 0x14, 0xd2, 0xe2, 0xe2, 0x09, 0x02, 0x7b, 0x00,
	0xaa, 0x98, 0x4f, 0x0f, 0xea, 0x1f, 0xec, 0x6a, 0x9d, 0xc0, 0x6e, 0x86, 0xab, 0x85, 0x7a, 0x01,
	0x8b, 0x5a, 0x1d, 0x2e, 0x5e, 0x0f, 0x88, 0x2b, 0xe1, 0xae, 0x80, 0xb9, 0x1a, 0x53, 0xb5, 0x93,
	0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1,
	0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x6f, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xb1, 0xcc,
	0x36, 0x2c, 0x02, 0x00, 0x00,
}
