// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./api/discovery/client.go

package discovery

import (
	types "github.com/TheThingsNetwork/ttn/core/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) Announce(token string) error {
	ret := _m.ctrl.Call(_m, "Announce", token)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) Announce(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Announce", arg0)
}

func (_m *MockClient) GetAll(serviceName string) ([]*Announcement, error) {
	ret := _m.ctrl.Call(_m, "GetAll", serviceName)
	ret0, _ := ret[0].([]*Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAll", arg0)
}

func (_m *MockClient) Get(serviceName string, id string) (*Announcement, error) {
	ret := _m.ctrl.Call(_m, "Get", serviceName, id)
	ret0, _ := ret[0].(*Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockClient) AddMetadata(key Metadata_Key, value []byte, token string) error {
	ret := _m.ctrl.Call(_m, "AddMetadata", key, value, token)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) AddMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddMetadata", arg0, arg1, arg2)
}

func (_m *MockClient) DeleteMetadata(key Metadata_Key, value []byte, token string) error {
	ret := _m.ctrl.Call(_m, "DeleteMetadata", key, value, token)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) DeleteMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMetadata", arg0, arg1, arg2)
}

func (_m *MockClient) GetAllForMetadata(serviceName string, key Metadata_Key, matchFunc func([]byte) bool) ([]*Announcement, error) {
	ret := _m.ctrl.Call(_m, "GetAllForMetadata", serviceName, key, matchFunc)
	ret0, _ := ret[0].([]*Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetAllForMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllForMetadata", arg0, arg1, arg2)
}

func (_m *MockClient) GetAllBrokersForDevAddr(devAddr types.DevAddr) ([]*Announcement, error) {
	ret := _m.ctrl.Call(_m, "GetAllBrokersForDevAddr", devAddr)
	ret0, _ := ret[0].([]*Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetAllBrokersForDevAddr(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllBrokersForDevAddr", arg0)
}

func (_m *MockClient) GetAllHandlersForAppID(appID string) ([]*Announcement, error) {
	ret := _m.ctrl.Call(_m, "GetAllHandlersForAppID", appID)
	ret0, _ := ret[0].([]*Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GetAllHandlersForAppID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllHandlersForAppID", arg0)
}

func (_m *MockClient) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
