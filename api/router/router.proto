// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "ttn/api/api.proto";
import "ttn/api/protocol/protocol.proto";
import "ttn/api/gateway/gateway.proto";
import "ttn/api/trace/trace.proto";

package router;

option go_package = "github.com/TheThingsNetwork/ttn/api/router";

message SubscribeRequest {}

message UplinkMessage {
  bytes                payload            = 1;
  protocol.Message     message            = 2;
  protocol.RxMetadata  protocol_metadata  = 11;
  gateway.RxMetadata   gateway_metadata   = 12;
  trace.Trace          trace              = 21;
}

message DownlinkMessage {
  bytes                     payload                 = 1;
  protocol.Message          message                 = 2;
  protocol.TxConfiguration  protocol_configuration  = 11;
  gateway.TxConfiguration   gateway_configuration   = 12;
  trace.Trace               trace                   = 21;
}

message DeviceActivationRequest {
  bytes                        payload              = 1;
  protocol.Message             message              = 2;
  bytes                        dev_eui              = 11 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
  bytes                        app_eui              = 12 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  protocol.RxMetadata          protocol_metadata    = 21;
  gateway.RxMetadata           gateway_metadata     = 22;
  protocol.ActivationMetadata  activation_metadata  = 23;
  trace.Trace                  trace                = 31;
}

message DeviceActivationResponse {
  // NOTE: In LoRaWAN, device activations are accepted with DownlinkMessages, so
  // this message is just an Ack.
  //
  // bytes                     payload                 = 1;
  // protocol.Message          message                 = 2;
  // protocol.TxConfiguration  protocol_configuration  = 11;
  // gateway.TxConfiguration   gateway_configuration   = 12;
  // trace.Trace               trace                   = 21;
}

// The Router service provides pure network functionality
service Router {
  // Gateway streams status messages to Router
  rpc GatewayStatus(stream gateway.Status) returns (google.protobuf.Empty);

  // Gateway streams uplink messages to Router
  rpc Uplink(stream UplinkMessage) returns (google.protobuf.Empty);

  // Gateway subscribes to downlink messages from Router
  rpc Subscribe(SubscribeRequest) returns (stream DownlinkMessage);

  // Gateway requests device activation
  rpc Activate(DeviceActivationRequest) returns (DeviceActivationResponse);
}

// message GatewayStatusRequest is used to request the status of a gateway from
// this Router
message GatewayStatusRequest {
  string gateway_id = 1;
}

message GatewayStatusResponse {
  int64           last_seen  = 1;
  gateway.Status  status     = 2;
  api.Rates       uplink     = 11;
  api.Rates       downlink   = 12;
}

// message StatusRequest is used to request the status of this Router
message StatusRequest {}

// message Status is the response to the StatusRequest
message Status {
  api.SystemStats    system    = 1;
  api.ComponentStats component = 2;

  api.Rates gateway_status   = 11;
  api.Rates uplink           = 12;
  api.Rates downlink         = 13;
  api.Rates activations      = 14;

  // Connections
  uint32  connected_gateways  = 21;
  uint32  connected_brokers   = 22;
}

// The RouterManager service provides configuration and monitoring functionality
service RouterManager {
  // Gateway owner or network operator requests Gateway status from Router Manager
  // Deprecated: Use monitor API (NOC) instead of this
  rpc GatewayStatus(GatewayStatusRequest) returns (GatewayStatusResponse);

  // Network operator requests Router status
  rpc GetStatus(StatusRequest) returns (Status);
}
