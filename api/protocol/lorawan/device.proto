// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package lorawan;

option go_package = "github.com/TheThingsNetwork/ttn/api/protocol/lorawan";

message DeviceIdentifier {
  // The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
  bytes  app_eui  = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  // The DevEUI is a unique, 8 byte identifier for the device.
  bytes  dev_eui  = 2 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
}

message Device {
  // The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
  bytes  app_eui     = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  // The DevEUI is a unique, 8 byte identifier for the device.
  bytes  dev_eui     = 2 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
  // The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
  string app_id      = 3;
  // The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
  string dev_id      = 4;
  // The DevAddr is a dynamic, 4 byte session address for the device.
  bytes  dev_addr    = 5 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];
  // The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
  // This key is negotiated during the OTAA join procedure, or statically configured using ABP.
  bytes  nwk_s_key   = 6 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.NwkSKey"];
  // The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
  // This key is negotiated during the OTAA join procedure, or statically configured using ABP.
  bytes  app_s_key   = 7 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppSKey"];
  // The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
  bytes  app_key     = 8 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppKey"];
  // FCntUp is the uplink frame counter for a device session.
  uint32 f_cnt_up    = 9;
  // FCntDown is the downlink frame counter for a device session.
  uint32 f_cnt_down  = 10;

  // The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
  bool   disable_f_cnt_check = 11;
  // The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
  bool   uses32_bit_f_cnt    = 12;
  // The ActivationContstraints are used to allocate a device address for a device (comma-separated).
  // There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
  string activation_constraints = 13;

  // When the device was last seen (Unix nanoseconds)
  int64  last_seen = 21;
}

// SetRegisterOnJoinMessage signals whether we expect on-join registration for an app
message SetRegisterOnJoinMessage {
  // App identifier
  string app_id  = 1;
  // Toggle on-join registration
  bool   enabled     = 2;
  // AppEui sets the AppEUI non-registered devices have to join with
  bytes app_eui = 3 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  // AppKey sets the AppKey that the new devices will register with 
  bytes app_key = 4 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppKey"];
  // AccessKey to the account server
  string access_key = 5;
  // AccessKeyName for the account server key
  string access_key_name = 6;
}

service DeviceManager {
  rpc GetDevice(DeviceIdentifier) returns (Device);
  rpc SetDevice(Device) returns (google.protobuf.Empty);
  rpc DeleteDevice(DeviceIdentifier) returns (google.protobuf.Empty);
  rpc SetRegisterOnJoin(SetRegisterOnJoinMessage) returns (google.protobuf.Empty);
}
