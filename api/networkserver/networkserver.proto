// Copyright Â© 2016 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "ttn/api/api.proto";
import "ttn/api/protocol/lorawan/device.proto";
import "ttn/api/broker/broker.proto";
import "ttn/api/handler/handler.proto";

package networkserver;

option go_package = "github.com/TheThingsNetwork/ttn/api/networkserver";

message DevicesRequest {
  bytes  dev_addr = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];
  uint32 f_cnt    = 2;
}

message DevicesResponse {
  repeated lorawan.Device results = 1;
}

service NetworkServer {
  // Broker requests devices with DevAddr for MIC check
  rpc GetDevices(DevicesRequest) returns (DevicesResponse);

  // Broker requests device activation "template" from Network Server
  rpc PrepareActivation(broker.DeduplicatedDeviceActivationRequest) returns (broker.DeduplicatedDeviceActivationRequest);

  // Broker confirms device activation
  rpc Activate(handler.DeviceActivationResponse) returns (handler.DeviceActivationResponse);

  // Broker informs Network Server about Uplink
  rpc Uplink(broker.DeduplicatedUplinkMessage) returns (broker.DeduplicatedUplinkMessage);

  // Broker informs Network Server about Downlink, NetworkServer should sign, add MIC, ...
  rpc Downlink(broker.DownlinkMessage) returns (broker.DownlinkMessage);
}

// message StatusRequest is used to request the status of this NetworkServer
message StatusRequest {}

// message Status is the response to the StatusRequest
message Status {
  api.SystemStats    system    = 1;
  api.ComponentStats component = 2;

  api.Rates uplink      = 11;
  api.Rates downlink    = 12;
  api.Rates activations = 13;

  api.Percentiles devices_per_address = 21;
}

// The NetworkServerManager service provides configuration and monitoring
// functionality
service NetworkServerManager {
  rpc GetStatus(StatusRequest) returns (Status);
}
