// Code generated by protoc-gen-gogo.
// source: broker_manager.proto
// DO NOT EDIT!

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ValidateOTAABrokerReq struct {
	Token      string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	AppEUI     []byte `protobuf:"bytes,2,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	NetAddress string `protobuf:"bytes,3,opt,name=NetAddress,json=netAddress,proto3" json:"NetAddress,omitempty"`
}

func (m *ValidateOTAABrokerReq) Reset()         { *m = ValidateOTAABrokerReq{} }
func (m *ValidateOTAABrokerReq) String() string { return proto.CompactTextString(m) }
func (*ValidateOTAABrokerReq) ProtoMessage()    {}
func (*ValidateOTAABrokerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{0}
}

type ValidateOTAABrokerRes struct {
}

func (m *ValidateOTAABrokerRes) Reset()         { *m = ValidateOTAABrokerRes{} }
func (m *ValidateOTAABrokerRes) String() string { return proto.CompactTextString(m) }
func (*ValidateOTAABrokerRes) ProtoMessage()    {}
func (*ValidateOTAABrokerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{1}
}

type UpsertABPBrokerReq struct {
	Token      string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	AppEUI     []byte `protobuf:"bytes,2,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	NetAddress string `protobuf:"bytes,3,opt,name=NetAddress,json=netAddress,proto3" json:"NetAddress,omitempty"`
	DevAddr    []byte `protobuf:"bytes,4,opt,name=DevAddr,json=devAddr,proto3" json:"DevAddr,omitempty"`
	NwkSKey    []byte `protobuf:"bytes,5,opt,name=NwkSKey,json=nwkSKey,proto3" json:"NwkSKey,omitempty"`
	DevMode    bool   `protobuf:"varint,6,opt,name=DevMode,json=devMode,proto3" json:"DevMode,omitempty"`
}

func (m *UpsertABPBrokerReq) Reset()                    { *m = UpsertABPBrokerReq{} }
func (m *UpsertABPBrokerReq) String() string            { return proto.CompactTextString(m) }
func (*UpsertABPBrokerReq) ProtoMessage()               {}
func (*UpsertABPBrokerReq) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{2} }

type UpsertABPBrokerRes struct {
}

func (m *UpsertABPBrokerRes) Reset()                    { *m = UpsertABPBrokerRes{} }
func (m *UpsertABPBrokerRes) String() string            { return proto.CompactTextString(m) }
func (*UpsertABPBrokerRes) ProtoMessage()               {}
func (*UpsertABPBrokerRes) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{3} }

type BrokerDevice struct {
	DevEUI  []byte `protobuf:"bytes,1,opt,name=DevEUI,json=devEUI,proto3" json:"DevEUI,omitempty"`
	DevAddr []byte `protobuf:"bytes,2,opt,name=DevAddr,json=devAddr,proto3" json:"DevAddr,omitempty"`
	NwkSKey []byte `protobuf:"bytes,3,opt,name=NwkSKey,json=nwkSKey,proto3" json:"NwkSKey,omitempty"`
}

func (m *BrokerDevice) Reset()                    { *m = BrokerDevice{} }
func (m *BrokerDevice) String() string            { return proto.CompactTextString(m) }
func (*BrokerDevice) ProtoMessage()               {}
func (*BrokerDevice) Descriptor() ([]byte, []int) { return fileDescriptorBrokerManager, []int{4} }

type ValidateTokenBrokerReq struct {
	Token  string `protobuf:"bytes,1,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
	AppEUI []byte `protobuf:"bytes,2,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
}

func (m *ValidateTokenBrokerReq) Reset()         { *m = ValidateTokenBrokerReq{} }
func (m *ValidateTokenBrokerReq) String() string { return proto.CompactTextString(m) }
func (*ValidateTokenBrokerReq) ProtoMessage()    {}
func (*ValidateTokenBrokerReq) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{5}
}

type ValidateTokenBrokerRes struct {
}

func (m *ValidateTokenBrokerRes) Reset()         { *m = ValidateTokenBrokerRes{} }
func (m *ValidateTokenBrokerRes) String() string { return proto.CompactTextString(m) }
func (*ValidateTokenBrokerRes) ProtoMessage()    {}
func (*ValidateTokenBrokerRes) Descriptor() ([]byte, []int) {
	return fileDescriptorBrokerManager, []int{6}
}

func init() {
	proto.RegisterType((*ValidateOTAABrokerReq)(nil), "core.ValidateOTAABrokerReq")
	proto.RegisterType((*ValidateOTAABrokerRes)(nil), "core.ValidateOTAABrokerRes")
	proto.RegisterType((*UpsertABPBrokerReq)(nil), "core.UpsertABPBrokerReq")
	proto.RegisterType((*UpsertABPBrokerRes)(nil), "core.UpsertABPBrokerRes")
	proto.RegisterType((*BrokerDevice)(nil), "core.BrokerDevice")
	proto.RegisterType((*ValidateTokenBrokerReq)(nil), "core.ValidateTokenBrokerReq")
	proto.RegisterType((*ValidateTokenBrokerRes)(nil), "core.ValidateTokenBrokerRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for BrokerManager service

type BrokerManagerClient interface {
	ValidateOTAA(ctx context.Context, in *ValidateOTAABrokerReq, opts ...grpc.CallOption) (*ValidateOTAABrokerRes, error)
	UpsertABP(ctx context.Context, in *UpsertABPBrokerReq, opts ...grpc.CallOption) (*UpsertABPBrokerRes, error)
	ValidateToken(ctx context.Context, in *ValidateTokenBrokerReq, opts ...grpc.CallOption) (*ValidateTokenBrokerRes, error)
}

type brokerManagerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerManagerClient(cc *grpc.ClientConn) BrokerManagerClient {
	return &brokerManagerClient{cc}
}

func (c *brokerManagerClient) ValidateOTAA(ctx context.Context, in *ValidateOTAABrokerReq, opts ...grpc.CallOption) (*ValidateOTAABrokerRes, error) {
	out := new(ValidateOTAABrokerRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/ValidateOTAA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) UpsertABP(ctx context.Context, in *UpsertABPBrokerReq, opts ...grpc.CallOption) (*UpsertABPBrokerRes, error) {
	out := new(UpsertABPBrokerRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/UpsertABP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) ValidateToken(ctx context.Context, in *ValidateTokenBrokerReq, opts ...grpc.CallOption) (*ValidateTokenBrokerRes, error) {
	out := new(ValidateTokenBrokerRes)
	err := grpc.Invoke(ctx, "/core.BrokerManager/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrokerManager service

type BrokerManagerServer interface {
	ValidateOTAA(context.Context, *ValidateOTAABrokerReq) (*ValidateOTAABrokerRes, error)
	UpsertABP(context.Context, *UpsertABPBrokerReq) (*UpsertABPBrokerRes, error)
	ValidateToken(context.Context, *ValidateTokenBrokerReq) (*ValidateTokenBrokerRes, error)
}

func RegisterBrokerManagerServer(s *grpc.Server, srv BrokerManagerServer) {
	s.RegisterService(&_BrokerManager_serviceDesc, srv)
}

func _BrokerManager_ValidateOTAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ValidateOTAABrokerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).ValidateOTAA(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BrokerManager_UpsertABP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpsertABPBrokerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).UpsertABP(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BrokerManager_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ValidateTokenBrokerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BrokerManagerServer).ValidateToken(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BrokerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.BrokerManager",
	HandlerType: (*BrokerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateOTAA",
			Handler:    _BrokerManager_ValidateOTAA_Handler,
		},
		{
			MethodName: "UpsertABP",
			Handler:    _BrokerManager_UpsertABP_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _BrokerManager_ValidateToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *ValidateOTAABrokerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ValidateOTAABrokerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.NetAddress) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.NetAddress)))
		i += copy(data[i:], m.NetAddress)
	}
	return i, nil
}

func (m *ValidateOTAABrokerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ValidateOTAABrokerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpsertABPBrokerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertABPBrokerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	if len(m.NetAddress) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.NetAddress)))
		i += copy(data[i:], m.NetAddress)
	}
	if len(m.DevAddr) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	if len(m.NwkSKey) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.NwkSKey)))
		i += copy(data[i:], m.NwkSKey)
	}
	if m.DevMode {
		data[i] = 0x30
		i++
		if m.DevMode {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpsertABPBrokerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpsertABPBrokerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BrokerDevice) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BrokerDevice) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DevEUI) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.DevEUI)))
		i += copy(data[i:], m.DevEUI)
	}
	if len(m.DevAddr) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.DevAddr)))
		i += copy(data[i:], m.DevAddr)
	}
	if len(m.NwkSKey) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.NwkSKey)))
		i += copy(data[i:], m.NwkSKey)
	}
	return i, nil
}

func (m *ValidateTokenBrokerReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ValidateTokenBrokerReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.AppEUI) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintBrokerManager(data, i, uint64(len(m.AppEUI)))
		i += copy(data[i:], m.AppEUI)
	}
	return i, nil
}

func (m *ValidateTokenBrokerRes) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ValidateTokenBrokerRes) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64BrokerManager(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BrokerManager(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBrokerManager(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ValidateOTAABrokerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.NetAddress)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *ValidateOTAABrokerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpsertABPBrokerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.NetAddress)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.NwkSKey)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	if m.DevMode {
		n += 2
	}
	return n
}

func (m *UpsertABPBrokerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BrokerDevice) Size() (n int) {
	var l int
	_ = l
	l = len(m.DevEUI)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.DevAddr)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.NwkSKey)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *ValidateTokenBrokerReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	l = len(m.AppEUI)
	if l > 0 {
		n += 1 + l + sovBrokerManager(uint64(l))
	}
	return n
}

func (m *ValidateTokenBrokerRes) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovBrokerManager(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBrokerManager(x uint64) (n int) {
	return sovBrokerManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidateOTAABrokerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateOTAABrokerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateOTAABrokerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateOTAABrokerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateOTAABrokerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateOTAABrokerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertABPBrokerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertABPBrokerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertABPBrokerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DevMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertABPBrokerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertABPBrokerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertABPBrokerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrokerDevice) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrokerDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrokerDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwkSKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NwkSKey = append(m.NwkSKey[:0], data[iNdEx:postIndex]...)
			if m.NwkSKey == nil {
				m.NwkSKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateTokenBrokerReq) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTokenBrokerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTokenBrokerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBrokerManager
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateTokenBrokerRes) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTokenBrokerRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTokenBrokerRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBrokerManager(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBrokerManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBrokerManager(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBrokerManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBrokerManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBrokerManager
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBrokerManager
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBrokerManager(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBrokerManager = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBrokerManager   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorBrokerManager = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x2a, 0xca, 0xcf,
	0x4e, 0x2d, 0x8a, 0xcf, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x49, 0xce, 0x2f, 0x4a, 0x55, 0x4a, 0xe5, 0x12, 0x0d, 0x4b, 0xcc, 0xc9, 0x4c, 0x49,
	0x2c, 0x49, 0xf5, 0x0f, 0x71, 0x74, 0x74, 0x02, 0xab, 0x0c, 0x4a, 0x2d, 0x14, 0x12, 0xe1, 0x62,
	0x0d, 0x01, 0xb2, 0xf3, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x58, 0x4b, 0x40, 0x1c, 0x21,
	0x31, 0x2e, 0x36, 0xc7, 0x82, 0x02, 0xd7, 0x50, 0x4f, 0x09, 0x26, 0xa0, 0x30, 0x4f, 0x10, 0x5b,
	0x22, 0x98, 0x27, 0x24, 0xc7, 0xc5, 0xe5, 0x97, 0x5a, 0xe2, 0x98, 0x92, 0x52, 0x94, 0x5a, 0x5c,
	0x2c, 0xc1, 0x0c, 0xd6, 0xc2, 0x95, 0x07, 0x17, 0x51, 0x12, 0xc7, 0x6e, 0x4d, 0xb1, 0xd2, 0x06,
	0x46, 0x2e, 0xa1, 0xd0, 0x82, 0xe2, 0xd4, 0xa2, 0x12, 0x47, 0xa7, 0x00, 0x1a, 0xd9, 0x2e, 0x24,
	0xc1, 0xc5, 0xee, 0x92, 0x5a, 0x06, 0xe2, 0x49, 0xb0, 0x80, 0x35, 0xb2, 0xa7, 0x40, 0xb8, 0x20,
	0x19, 0xbf, 0xf2, 0xec, 0x60, 0xef, 0xd4, 0x4a, 0x09, 0x56, 0x88, 0x4c, 0x1e, 0x84, 0x0b, 0xd5,
	0xe3, 0x9b, 0x9f, 0x92, 0x2a, 0xc1, 0x06, 0x94, 0xe1, 0x00, 0xeb, 0x01, 0x71, 0x95, 0x44, 0xb0,
	0xb8, 0xb8, 0x58, 0x29, 0x8a, 0x8b, 0x07, 0xc2, 0x01, 0xea, 0xca, 0x4c, 0x4e, 0x05, 0xb9, 0x15,
	0xc8, 0x02, 0xb9, 0x95, 0x11, 0xe2, 0xd6, 0x14, 0x30, 0x0f, 0xd9, 0x2d, 0x4c, 0x38, 0xdd, 0xc2,
	0x8c, 0xe2, 0x16, 0x25, 0x37, 0x2e, 0x31, 0x58, 0xe8, 0x81, 0x43, 0x85, 0xcc, 0x70, 0x52, 0x92,
	0xc0, 0x61, 0x4e, 0xb1, 0xd1, 0x73, 0x46, 0x2e, 0x5e, 0x08, 0xcf, 0x17, 0x92, 0x48, 0x84, 0x3c,
	0xb8, 0x78, 0x90, 0x63, 0x4c, 0x48, 0x5a, 0x0f, 0x94, 0x5e, 0xf4, 0xb0, 0x26, 0x16, 0x29, 0x3c,
	0x92, 0xc5, 0x42, 0xf6, 0x5c, 0x9c, 0xf0, 0xf0, 0x12, 0x92, 0x80, 0xa8, 0xc4, 0x8c, 0x72, 0x29,
	0x5c, 0x32, 0xc5, 0x42, 0xde, 0x5c, 0xbc, 0x28, 0xce, 0x16, 0x92, 0x41, 0xb5, 0x0e, 0x35, 0x4c,
	0xa4, 0xf0, 0xc9, 0x16, 0x3b, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0x01, 0x88, 0x1f, 0x00, 0xf1,
	0x8c, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0xe0, 0xfc, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc6,
	0x07, 0x41, 0x5b, 0x27, 0x03, 0x00, 0x00,
}
